@page "/csharp"

@inherits CancelableComponentBase

@inject IJSRuntime JSRuntime

<PageTitle>Code Editor - Faluf</PageTitle>

<style>
	#code-editor {
		height: 800px;
	}

	#diff-editor {
		height: 800px;
	}
</style>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-2">
	<MudPaper Class="pa-3 py-6 ma-1" Elevation="5">
		<MudText Typo="Typo.h5" Align="Align.Center">Code Editor Highlighter</MudText>

		<MudDivider DividerType="DividerType.Middle" Class="mt-2 mb-4" />

		<MudSwitch T="bool" CheckedChanged="ChangeThemeAsync" Checked="isDarkTheme" Color="Color.Primary" Class="ma-2">
			<MudText Typo="Typo.body1" Align="Align.Center">
				Dark Mode
			</MudText>
		</MudSwitch>

		<MudTabs>
			<MudTabPanel Text="C#">
				<StandaloneCodeEditor Id="code-editor" ConstructionOptions="EditorConstructionOptions" />
			</MudTabPanel>

			<MudTabPanel Text="Code Diff">
				<StandaloneDiffEditor @ref="diffEditor" Id="diff-editor" ConstructionOptions="DiffEditorConstructionOptions" OnDidInit="EditorOnDidInit" />
			</MudTabPanel>
		</MudTabs>
	</MudPaper>
</MudContainer>

@code {
	private StandaloneDiffEditor? diffEditor;
	private bool isDarkTheme = true;

	private StandaloneDiffEditorConstructionOptions DiffEditorConstructionOptions(StandaloneDiffEditor editor)
	{
		return new StandaloneDiffEditorConstructionOptions
			{
				Theme = isDarkTheme ? "vs-dark" : "vs",
				OriginalEditable = true
			};
	}

	private async Task EditorOnDidInit()
	{
		// Get or create the original model
		TextModel original_model = await Global.GetModel("sample-diff-editor-originalModel");
		if (original_model == null)
		{
			var original_value = "\"use strict\";\n" +
							"function Person(age) {\n" +
							"	if (age) {\n" +
							"		this.age = age;\n" +
							"	}\n" +
							"}\n" +
							"Person.prototype.getAge = function () {\n" +
							"	return this.age;\n" +
							"};\n";
			original_model = await Global.CreateModel(original_value, "javascript", "sample-diff-editor-originalModel");
		}

		// Get or create the modified model
		TextModel modified_model = await Global.GetModel("sample-diff-editor-modifiedModel");
		if (modified_model == null)
		{
			var modified_value = "\"don't use strict\";\n" +
							"furction Person(age_is_just_a_number) {\n" +
							"	if (age_is_just_a_number) {\n" +
							"		this.age_is_just_a_number = age_is_just_a_number;\n" +
							"	}\n" +
							"}\n" +
							"Person.prototype.getAge = function () {\n" +
							"	return this.age_is_just_a_number;\n" +
							"};\n" +
							"//Really, it is just a number people!";
			modified_model = await Global.CreateModel(modified_value, "javascript", "sample-diff-editor-modifiedModel");
		}

		// Set the editor model
		if (diffEditor is not null)
		{
			await diffEditor.SetModel(new DiffEditorModel
				{
					Original = original_model,
					Modified = modified_model
				});
		}
	}

	private async Task ChangeThemeAsync(bool value)
	{
		isDarkTheme = value;
		await Global.SetTheme(isDarkTheme ? "vs-dark" : "vs");
	}

	private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
	{
		return new StandaloneEditorConstructionOptions
			{
				Theme = isDarkTheme ? "vs-dark" : "vs",
				AutomaticLayout = true,
				Language = "csharp",
				Value =
											""""""
public sealed class ResponseDTO<T> where T : class
{
	public bool IsSuccess { get; set; }

	public string? ErrorMessage { get; set; }

	public string? ExceptionMessage { get; set; }

	public string? StackTrace { get; set; }

	public ErrorType? ErrorType { get; set; }

	public T? Content { get; set; }

	public int RecordCount { get; set; }

	public ResponseDTO(bool isSuccess, string? errorMessage, string? exceptionMessage, string? stackTrace, ErrorType? errorType, T? content, int recordCount = 0)
	{
		IsSuccess = isSuccess;
		ErrorMessage = errorMessage;
		ExceptionMessage = exceptionMessage;
		StackTrace = stackTrace;
		ErrorType = errorType;
		Content = content;
		RecordCount = recordCount;
	}
}
""""""
			};
	}
}